{"version":3,"file":"svg-plant.min.umd.js","sources":["../node_modules/json-stringify-safe/stringify.js","../node_modules/random-seed/index.js","../src/util/util.js","../src/Plant/plantPotSvg.js","../src/util/bezierCurveBoundingBox.js","../src/Plant/PlantBody.js","../src/Plant/SvgPlant.js","../src/Genera/BaseGenus.js","../src/Genera/BushyPlantGenus.js","../src/Genera/DragonTreeGenus.js","../src/Genera/ZamiaGenus.js","../src/Genera/PileaGenus.js","../src/util/DevTools.js","../src/main.js"],"sourcesContent":["exports = module.exports = stringify\nexports.getSerialize = serializer\n\nfunction stringify(obj, replacer, spaces, cycleReplacer) {\n  return JSON.stringify(obj, serializer(replacer, cycleReplacer), spaces)\n}\n\nfunction serializer(replacer, cycleReplacer) {\n  var stack = [], keys = []\n\n  if (cycleReplacer == null) cycleReplacer = function(key, value) {\n    if (stack[0] === value) return \"[Circular ~]\"\n    return \"[Circular ~.\" + keys.slice(0, stack.indexOf(value)).join(\".\") + \"]\"\n  }\n\n  return function(key, value) {\n    if (stack.length > 0) {\n      var thisPos = stack.indexOf(this)\n      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this)\n      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key)\n      if (~stack.indexOf(value)) value = cycleReplacer.call(this, key, value)\n    }\n    else stack.push(value)\n\n    return replacer == null ? value : replacer.call(this, key, value)\n  }\n}\n","/*\n * random-seed\n * https://github.com/skratchdot/random-seed\n *\n * This code was originally written by Steve Gibson and can be found here:\n *\n * https://www.grc.com/otg/uheprng.htm\n *\n * It was slightly modified for use in node, to pass jshint, and a few additional\n * helper functions were added.\n *\n * Copyright (c) 2013 skratchdot\n * Dual Licensed under the MIT license and the original GRC copyright/license\n * included below.\n */\n/*\t============================================================================\n\t\t\t\t\t\t\t\t\tGibson Research Corporation\n\t\t\t\tUHEPRNG - Ultra High Entropy Pseudo-Random Number Generator\n\t============================================================================\n\tLICENSE AND COPYRIGHT:  THIS CODE IS HEREBY RELEASED INTO THE PUBLIC DOMAIN\n\tGibson Research Corporation releases and disclaims ALL RIGHTS AND TITLE IN\n\tTHIS CODE OR ANY DERIVATIVES. Anyone may be freely use it for any purpose.\n\t============================================================================\n\tThis is GRC's cryptographically strong PRNG (pseudo-random number generator)\n\tfor JavaScript. It is driven by 1536 bits of entropy, stored in an array of\n\t48, 32-bit JavaScript variables.  Since many applications of this generator,\n\tincluding ours with the \"Off The Grid\" Latin Square generator, may require\n\tthe deteriministic re-generation of a sequence of PRNs, this PRNG's initial\n\tentropic state can be read and written as a static whole, and incrementally\n\tevolved by pouring new source entropy into the generator's internal state.\n\t----------------------------------------------------------------------------\n\tENDLESS THANKS are due Johannes Baagoe for his careful development of highly\n\trobust JavaScript implementations of JS PRNGs.  This work was based upon his\n\tJavaScript \"Alea\" PRNG which is based upon the extremely robust Multiply-\n\tWith-Carry (MWC) PRNG invented by George Marsaglia. MWC Algorithm References:\n\thttp://www.GRC.com/otg/Marsaglia_PRNGs.pdf\n\thttp://www.GRC.com/otg/Marsaglia_MWC_Generators.pdf\n\t----------------------------------------------------------------------------\n\tThe quality of this algorithm's pseudo-random numbers have been verified by\n\tmultiple independent researchers. It handily passes the fermilab.ch tests as\n\twell as the \"diehard\" and \"dieharder\" test suites.  For individuals wishing\n\tto further verify the quality of this algorithm's pseudo-random numbers, a\n\t256-megabyte file of this algorithm's output may be downloaded from GRC.com,\n\tand a Microsoft Windows scripting host (WSH) version of this algorithm may be\n\tdownloaded and run from the Windows command prompt to generate unique files\n\tof any size:\n\tThe Fermilab \"ENT\" tests: http://fourmilab.ch/random/\n\tThe 256-megabyte sample PRN file at GRC: https://www.GRC.com/otg/uheprng.bin\n\tThe Windows scripting host version: https://www.GRC.com/otg/wsh-uheprng.js\n\t----------------------------------------------------------------------------\n\tQualifying MWC multipliers are: 187884, 686118, 898134, 1104375, 1250205,\n\t1460910 and 1768863. (We use the largest one that's < 2^21)\n\t============================================================================ */\n'use strict';\nvar stringify = require('json-stringify-safe');\n\n/*\t============================================================================\nThis is based upon Johannes Baagoe's carefully designed and efficient hash\nfunction for use with JavaScript.  It has a proven \"avalanche\" effect such\nthat every bit of the input affects every bit of the output 50% of the time,\nwhich is good.\tSee: http://baagoe.com/en/RandomMusings/hash/avalanche.xhtml\n============================================================================\n*/\nvar Mash = function () {\n\tvar n = 0xefc8249d;\n\tvar mash = function (data) {\n\t\tif (data) {\n\t\t\tdata = data.toString();\n\t\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\t\tn += data.charCodeAt(i);\n\t\t\t\tvar h = 0.02519603282416938 * n;\n\t\t\t\tn = h >>> 0;\n\t\t\t\th -= n;\n\t\t\t\th *= n;\n\t\t\t\tn = h >>> 0;\n\t\t\t\th -= n;\n\t\t\t\tn += h * 0x100000000; // 2^32\n\t\t\t}\n\t\t\treturn (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n\t\t} else {\n\t\t\tn = 0xefc8249d;\n\t\t}\n\t};\n\treturn mash;\n};\n\nvar uheprng = function (seed) {\n\treturn (function () {\n\t\tvar o = 48; // set the 'order' number of ENTROPY-holding 32-bit values\n\t\tvar c = 1; // init the 'carry' used by the multiply-with-carry (MWC) algorithm\n\t\tvar p = o; // init the 'phase' (max-1) of the intermediate variable pointer\n\t\tvar s = new Array(o); // declare our intermediate variables array\n\t\tvar i; // general purpose local\n\t\tvar j; // general purpose local\n\t\tvar k = 0; // general purpose local\n\n\t\t// when our \"uheprng\" is initially invoked our PRNG state is initialized from the\n\t\t// browser's own local PRNG. This is okay since although its generator might not\n\t\t// be wonderful, it's useful for establishing large startup entropy for our usage.\n\t\tvar mash = new Mash(); // get a pointer to our high-performance \"Mash\" hash\n\n\t\t// fill the array with initial mash hash values\n\t\tfor (i = 0; i < o; i++) {\n\t\t\ts[i] = mash(Math.random());\n\t\t}\n\n\t\t// this PRIVATE (internal access only) function is the heart of the multiply-with-carry\n\t\t// (MWC) PRNG algorithm. When called it returns a pseudo-random number in the form of a\n\t\t// 32-bit JavaScript fraction (0.0 to <1.0) it is a PRIVATE function used by the default\n\t\t// [0-1] return function, and by the random 'string(n)' function which returns 'n'\n\t\t// characters from 33 to 126.\n\t\tvar rawprng = function () {\n\t\t\tif (++p >= o) {\n\t\t\t\tp = 0;\n\t\t\t}\n\t\t\tvar t = 1768863 * s[p] + c * 2.3283064365386963e-10; // 2^-32\n\t\t\treturn s[p] = t - (c = t | 0);\n\t\t};\n\n\t\t// this EXPORTED function is the default function returned by this library.\n\t\t// The values returned are integers in the range from 0 to range-1. We first\n\t\t// obtain two 32-bit fractions (from rawprng) to synthesize a single high\n\t\t// resolution 53-bit prng (0 to <1), then we multiply this by the caller's\n\t\t// \"range\" param and take the \"floor\" to return a equally probable integer.\n\t\tvar random = function (range) {\n\t\t\treturn Math.floor(range * (rawprng() + (rawprng() * 0x200000 | 0) * 1.1102230246251565e-16)); // 2^-53\n\t\t};\n\n\t\t// this EXPORTED function 'string(n)' returns a pseudo-random string of\n\t\t// 'n' printable characters ranging from chr(33) to chr(126) inclusive.\n\t\trandom.string = function (count) {\n\t\t\tvar i;\n\t\t\tvar s = '';\n\t\t\tfor (i = 0; i < count; i++) {\n\t\t\t\ts += String.fromCharCode(33 + random(94));\n\t\t\t}\n\t\t\treturn s;\n\t\t};\n\n\t\t// this PRIVATE \"hash\" function is used to evolve the generator's internal\n\t\t// entropy state. It is also called by the EXPORTED addEntropy() function\n\t\t// which is used to pour entropy into the PRNG.\n\t\tvar hash = function () {\n\t\t\tvar args = Array.prototype.slice.call(arguments);\n\t\t\tfor (i = 0; i < args.length; i++) {\n\t\t\t\tfor (j = 0; j < o; j++) {\n\t\t\t\t\ts[j] -= mash(args[i]);\n\t\t\t\t\tif (s[j] < 0) {\n\t\t\t\t\t\ts[j] += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// this EXPORTED \"clean string\" function removes leading and trailing spaces and non-printing\n\t\t// control characters, including any embedded carriage-return (CR) and line-feed (LF) characters,\n\t\t// from any string it is handed. this is also used by the 'hashstring' function (below) to help\n\t\t// users always obtain the same EFFECTIVE uheprng seeding key.\n\t\trandom.cleanString = function (inStr) {\n\t\t\tinStr = inStr.replace(/(^\\s*)|(\\s*$)/gi, ''); // remove any/all leading spaces\n\t\t\tinStr = inStr.replace(/[\\x00-\\x1F]/gi, ''); // remove any/all control characters\n\t\t\tinStr = inStr.replace(/\\n /, '\\n'); // remove any/all trailing spaces\n\t\t\treturn inStr; // return the cleaned up result\n\t\t};\n\n\t\t// this EXPORTED \"hash string\" function hashes the provided character string after first removing\n\t\t// any leading or trailing spaces and ignoring any embedded carriage returns (CR) or Line Feeds (LF)\n\t\trandom.hashString = function (inStr) {\n\t\t\tinStr = random.cleanString(inStr);\n\t\t\tmash(inStr); // use the string to evolve the 'mash' state\n\t\t\tfor (i = 0; i < inStr.length; i++) { // scan through the characters in our string\n\t\t\t\tk = inStr.charCodeAt(i); // get the character code at the location\n\t\t\t\tfor (j = 0; j < o; j++) { //\t\"mash\" it into the UHEPRNG state\n\t\t\t\t\ts[j] -= mash(k);\n\t\t\t\t\tif (s[j] < 0) {\n\t\t\t\t\t\ts[j] += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// this EXPORTED function allows you to seed the random generator.\n\t\trandom.seed = function (seed) {\n\t\t\tif (typeof seed === 'undefined' || seed === null) {\n\t\t\t\tseed = Math.random();\n\t\t\t}\n\t\t\tif (typeof seed !== 'string') {\n\t\t\t\tseed = stringify(seed, function (key, value) {\n\t\t\t\t\tif (typeof value === 'function') {\n\t\t\t\t\t\treturn (value).toString();\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t});\n\t\t\t}\n\t\t\trandom.initState();\n\t\t\trandom.hashString(seed);\n\t\t};\n\n\t\t// this handy exported function is used to add entropy to our uheprng at any time\n\t\trandom.addEntropy = function ( /* accept zero or more arguments */ ) {\n\t\t\tvar args = [];\n\t\t\tfor (i = 0; i < arguments.length; i++) {\n\t\t\t\targs.push(arguments[i]);\n\t\t\t}\n\t\t\thash((k++) + (new Date().getTime()) + args.join('') + Math.random());\n\t\t};\n\n\t\t// if we want to provide a deterministic startup context for our PRNG,\n\t\t// but without directly setting the internal state variables, this allows\n\t\t// us to initialize the mash hash and PRNG's internal state before providing\n\t\t// some hashing input\n\t\trandom.initState = function () {\n\t\t\tmash(); // pass a null arg to force mash hash to init\n\t\t\tfor (i = 0; i < o; i++) {\n\t\t\t\ts[i] = mash(' '); // fill the array with initial mash hash values\n\t\t\t}\n\t\t\tc = 1; // init our multiply-with-carry carry\n\t\t\tp = o; // init our phase\n\t\t};\n\n\t\t// we use this (optional) exported function to signal the JavaScript interpreter\n\t\t// that we're finished using the \"Mash\" hash function so that it can free up the\n\t\t// local \"instance variables\" is will have been maintaining.  It's not strictly\n\t\t// necessary, of course, but it's good JavaScript citizenship.\n\t\trandom.done = function () {\n\t\t\tmash = null;\n\t\t};\n\n\t\t// if we called \"uheprng\" with a seed value, then execute random.seed() before returning\n\t\tif (typeof seed !== 'undefined') {\n\t\t\trandom.seed(seed);\n\t\t}\n\n\t\t// Returns a random integer between 0 (inclusive) and range (exclusive)\n\t\trandom.range = function (range) {\n\t\t\treturn random(range);\n\t\t};\n\n\t\t// Returns a random float between 0 (inclusive) and 1 (exclusive)\n\t\trandom.random = function () {\n\t\t\treturn random(Number.MAX_VALUE - 1) / Number.MAX_VALUE;\n\t\t};\n\n\t\t// Returns a random float between min (inclusive) and max (exclusive)\n\t\trandom.floatBetween = function (min, max) {\n\t\t\treturn random.random() * (max - min) + min;\n\t\t};\n\n\t\t// Returns a random integer between min (inclusive) and max (inclusive)\n\t\trandom.intBetween = function (min, max) {\n\t\t\treturn Math.floor(random.random() * (max - min + 1)) + min;\n\t\t};\n\n\t\t// when our main outer \"uheprng\" function is called, after setting up our\n\t\t// initial variables and entropic state, we return an \"instance pointer\"\n\t\t// to the internal anonymous function which can then be used to access\n\t\t// the uheprng's various exported functions.  As with the \".done\" function\n\t\t// above, we should set the returned value to 'null' once we're finished\n\t\t// using any of these functions.\n\t\treturn random;\n\t}());\n};\n\n// Modification for use in node:\nuheprng.create = function (seed) {\n\treturn new uheprng(seed);\n};\nmodule.exports = uheprng;\n","import RNG from 'random-seed';\r\n\r\nconst html = {\r\n    node( tag, set ) {\r\n        const node = document.createElement( tag );\r\n        html.attr( node, set );\r\n        return node;\r\n    },\r\n    nodeNS( tag, set, ns ) {\r\n        const node = document.createElementNS( ns, tag );\r\n        html.attr( node, set );\r\n        return node;\r\n    },\r\n    attr( node, set ) {\r\n        for (let name in set) node.setAttribute( name, set[ name ] );\r\n    },\r\n\r\n    svg: {\r\n        root( set ) {\r\n            const svg = html.svg.node( 'svg', set );\r\n            svg.setAttribute( 'xmlns', \"http://www.w3.org/2000/svg\" );\r\n            svg.setAttributeNS( \"http://www.w3.org/2000/xmlns/\", \"xmlns:xlink\", \"http://www.w3.org/1999/xlink\" );\r\n            return svg;\r\n        },\r\n        node( tag, set ) {\r\n            const el = html.nodeNS( tag, {}, \"http://www.w3.org/2000/svg\" );\r\n            html.attr( el, set );\r\n            return el;\r\n        },\r\n        stroke({ color='#000', w=1, opacity=1, cap='square', join='miter', dash='', nss=false },set={}) {\r\n            set['stroke'] = color;\r\n            set['stroke-width'] = w;\r\n            set['stroke-linecap'] = cap;\r\n            set['stroke-linejoin'] = join;\r\n            if (dash) set['stroke-dasharray'] = dash;\r\n            if (opacity < 1) set['stroke-opacity'] = opacity;\r\n            if (nss) set['vector-effect'] = 'non-scaling-stroke';\r\n\r\n            return set;\r\n        },\r\n\r\n        compilePathDescription( points ) {\r\n            const d = [];\r\n\r\n            for (const p of points) {\r\n                if (p.length == 1) d.push( p );\r\n                else if (p.length == 2) d.push( p[0], p[1] );\r\n                else if (p.length == 3) d.push( p[0], p[1], p[2] );\r\n            }\r\n\r\n            return d.join( ' ' );\r\n        }\r\n    },\r\n};\r\n\r\nconst math = {\r\n    toRadians( degrees ) {\r\n        return degrees * (Math.PI / 180);\r\n    },\r\n\r\n    fromAngle( angle, length=1, tx=0, ty=0, svgCommand, precision ) {\r\n        const a = [\r\n            Math.sin( math.toRadians( angle ) ) * length + tx,\r\n            - Math.cos( math.toRadians( angle ) ) * length + ty,\r\n        ];\r\n\r\n        if (precision) {\r\n            a[ 0 ] = Math.round( a[ 0 ] * precision );\r\n            a[ 1 ] = Math.round( a[ 1 ] * precision );\r\n        }\r\n\r\n        if (svgCommand) a.unshift( svgCommand );\r\n\r\n        return a;\r\n    },\r\n\r\n    rectFromLine( p1, p2, a1, a2, w1, w2, precision ) {\r\n        w1 /= 2;\r\n        w2 /= 2;\r\n        return [\r\n            math.fromAngle( a1 - 90, w1, p1[0], p1[1], 'M', precision ),\r\n            math.fromAngle( a2 - 90, w2, p2[0], p2[1], 'L', precision ),\r\n            math.fromAngle( a2 + 90, w2, p2[0], p2[1], 'L', precision ),\r\n            math.fromAngle( a1 + 90, w1, p1[0], p1[1], 'L', precision ),\r\n            'Z',\r\n        ];\r\n    },\r\n\r\n    pointOnLine( p1, p2, d ) {\r\n        return [\r\n            p1[0] + d * (p2[0] - p1[0]),\r\n            p1[1] + d * (p2[1] - p1[1]),\r\n        ];\r\n    },\r\n\r\n    distance( p1, p2 ) {\r\n        const dx = p1[0] - p2[0];\r\n        const dy = p1[1] - p2[1];\r\n        return Math.sqrt( dx*dx + dy*dy );\r\n    }\r\n};\r\n\r\nconst plantHelper = {\r\n    rootPosAngle( rng, xMax, maxAngle ) {\r\n        const x = rng.range( -xMax, xMax );\r\n        const f = Math.abs( x ) / xMax;\r\n        return {\r\n            x,\r\n            segmentAngle: maxAngle * f * (x < 0 ? -1 : 1),\r\n        };\r\n    },\r\n\r\n    segmentAngle( baseNode ) {\r\n        if (baseNode.attr.segmentAngle !== undefined) return baseNode.attr.segmentAngle;\r\n        return baseNode.attr.angle;\r\n    },\r\n\r\n    nextAngle( rng, pos, prevNode, variance, alternate ) {\r\n        if (pos.isOffshoot) return prevNode.attr.angle;\r\n\r\n        const pa = this.segmentAngle( prevNode );\r\n\r\n        if (alternate) {\r\n            const dir = pos.branchNum>0 ? 1 : prevNode.treeRoot.attr.x>=0 ? 1 : -1;\r\n            return pa + (prevNode.pos.num % 2 ? 1 : -1) * rng.range( 0, variance ) * dir;\r\n        }\r\n        else {\r\n            return pa + rng.range( -variance, variance );\r\n        }\r\n    },\r\n\r\n    archingBranchAngle( rng, pos, prevNode, variance, numAdjust ) {\r\n        if (pos.isOffshoot) return prevNode.attr.angle;\r\n\r\n        const pa = plantHelper.segmentAngle( prevNode );\r\n        const base = prevNode.branchRoot.attr.branchArchAngle;\r\n        const f = numAdjust ? (1 - numAdjust) + numAdjust * (1 - pos.numFactor) : 1;\r\n\r\n        return pa + f * base + rng.range( -variance, variance );\r\n    },\r\n\r\n    repeat( rng, n, p, cb, shuffle=true ) {\r\n        const a = [];\r\n\r\n        if (typeof p == 'function') {\r\n            cb = p;\r\n            p = 1;\r\n        }\r\n\r\n        if (p <= 0) return a;\r\n        const test = p < 1;\r\n\r\n        if (Array.isArray( n )) {\r\n            for (let i of n) if (!test || rng.test( p )) {\r\n                a.push( cb( i ) );\r\n            }\r\n        }\r\n        else if (typeof n == 'object') {\r\n            for (let i=n.from; i<=n.to; i+=n.step) if (!test || rng.test( p )) {\r\n                a.push( cb( i ) );\r\n            }\r\n        }\r\n        else {\r\n            if (p > 1 && p > n) n = rng.intRange( n, p );\r\n\r\n            for (let i=0; i<n; i++) if (!test || rng.test( p )) {\r\n                a.push( cb( i ) );\r\n            }\r\n        }\r\n\r\n        if (shuffle) rng.shuffle( a );\r\n\r\n        return a;\r\n    }\r\n};\r\n\r\nconst rng = seed => {\r\n    if (seed === undefined) seed = (Math.random() + '').substring( 2 ) * 1;\r\n    let fn;\r\n\r\n    const rng = {\r\n        get seed() {\r\n            return seed;\r\n        },\r\n        reset() {\r\n            fn = (new RNG( seed )).random;\r\n        },\r\n\r\n        random( v=1 ) {\r\n            return fn() * v;\r\n        },\r\n        test( p=.5, pass=true, fail=false ) {\r\n            if (p >= 1) return pass;\r\n            if (p <= 0) return fail;\r\n            return fn() < p ? pass : fail;\r\n        },\r\n        range( v0, v1 ) {\r\n            if (v0==v1) return v0;\r\n            return v0 + fn() * ( v1 - v0 );\r\n        },\r\n        intRange( v0, v1 ) {\r\n            if (v0==v1) return v0;\r\n            return v0 + Math.floor( fn() * ( v1 - v0 + 1 ) );\r\n        },\r\n        ranges( ... ranges ) {\r\n            const ep = 1 / ranges.length;\r\n\r\n            ranges = [ ... ranges ];\r\n            const last = ranges.pop();\r\n\r\n            for (let r of ranges) {\r\n                const p = r[2] || ep;\r\n                if (rng.test( p )) return rng.range( r[0], r[1] );\r\n            }\r\n\r\n            return rng.range( last[0], last[1] );\r\n        },\r\n\r\n        shuffle( a ) {\r\n            for (let i = a.length - 1; i > 0; i--) {\r\n                const j = Math.floor( fn() * (i + 1) );\r\n                const tmp = a[i];\r\n                a[i] = a[j];\r\n                a[j] = tmp;\r\n            }\r\n            return a;\r\n        }\r\n    };\r\n\r\n    rng.reset();\r\n\r\n    return rng;\r\n}\r\n\r\nclass BBox {\r\n    constructor({ x0, x1, y0, y1 }={}) {\r\n        this.x0 = Infinity;\r\n        this.x1 = -Infinity;\r\n        this.y0 = Infinity;\r\n        this.y1 = -Infinity;\r\n\r\n        if (x0 !== undefined) this.x0 = x0;\r\n        if (x1 !== undefined) this.x1 = x1;\r\n        if (y0 !== undefined) this.y0 = y0;\r\n        if (y1 !== undefined) this.y1 = y1;\r\n    }\r\n\r\n    addX( v ) {\r\n        if (v < this.x0) this.x0 = v;\r\n        if (v > this.x1) this.x1 = v;\r\n        return this;\r\n    }\r\n    addY( v ) {\r\n        if (v < this.y0) this.y0 = v;\r\n        if (v > this.y1) this.y1 = v;\r\n        return this;\r\n    }\r\n    addPoint( x, y ) {\r\n        this.addX( x );\r\n        this.addY( y );\r\n        return this;\r\n    }\r\n    addBBox( bbox ) {\r\n        this.addX( bbox.x0 );\r\n        this.addX( bbox.x1 );\r\n        this.addY( bbox.y0 );\r\n        this.addY( bbox.y1 );\r\n        return this;\r\n    }\r\n\r\n    expand( v ) {\r\n        this.x0 -= v;\r\n        this.x1 += v;\r\n\r\n        this.y0 -= v;\r\n        this.y1 += v;\r\n\r\n        return this;\r\n    }\r\n\r\n    contains( bbox, strict ) {\r\n        if (strict) return this.x0 < bbox.x0 && this.x1 > bbox.x1 && this.y0 < bbox.y0 && this.y1 > bbox.y1;\r\n        return this.x0 <= bbox.x0 && this.x1 >= bbox.x1 && this.y0 <= bbox.y0 && this.y1 >= bbox.y1;\r\n    }\r\n    containedBy( bbox, strict ) {\r\n        if (strict) return this.x0 > bbox.x0 && this.x1 < bbox.x1 && this.y0 > bbox.y0 && this.y1 < bbox.y1;\r\n        return this.x0 >= bbox.x0 && this.x1 <= bbox.x1 && this.y0 >= bbox.y0 && this.y1 <= bbox.y1;\r\n    }\r\n    containsPoint( x, y, strict ) {\r\n        if (strict) return !( x <= this.x0 || x >= this.x1 || y <= this.y0 || y >= this.y1 );\r\n        return !( x < this.x0 || x > this.x1 || y < this.y0 || y > this.y1 );\r\n    }\r\n\r\n    clone() {\r\n        return new BBox( this.data );\r\n    }\r\n\r\n    withPrecision( p ) {\r\n        return new BBox({\r\n            x0: Math.round( this.x0 * p ),\r\n            x1: Math.round( this.x1 * p ),\r\n            y0: Math.round( this.y0 * p ),\r\n            y1: Math.round( this.y1 * p ),\r\n        });\r\n    }\r\n\r\n    get width() {\r\n        return this.x1 - this.x0;\r\n    }\r\n    get height() {\r\n        return this.y1 - this.y0;\r\n    }\r\n\r\n    get aspectRatio() {\r\n        return this.width / this.height;\r\n    }\r\n\r\n    get data() {\r\n        return {\r\n            x0: this.x0,\r\n            x1: this.x1,\r\n            y0: this.y0,\r\n            y1: this.y1\r\n        };\r\n    }\r\n\r\n    get pointsArray() {\r\n        return [\r\n            [ this.x0, this.y0 ],\r\n            [ this.x1, this.y1 ],\r\n        ];\r\n    }\r\n\r\n    get viewBox() {\r\n        return `${this.x0} ${this.y0} ${this.width} ${this.height}`;\r\n    }\r\n}\r\n\r\nclass ProcTree {\r\n\r\n    constructor( maxBranchNum, getNode, getOffshoots ) {\r\n        this.maxBranchNum = maxBranchNum;\r\n        this.getNode = getNode;\r\n        this.getOffshoots = getOffshoots;\r\n\r\n        this.roots = [];\r\n    }\r\n\r\n    grow() {\r\n        const roots = this.getOffshoots( null );\r\n        for (let i in roots) this.growBranch( null, i, roots[ i ].n, roots[ i ].attr );\r\n    }\r\n\r\n    growBranch( rootNode, offshootNum, segmentCount, attr ) {\r\n        const isTreeRoot = !rootNode;\r\n\r\n        let node = this.addNode( rootNode, true, offshootNum, segmentCount, attr );\r\n\r\n        if (isTreeRoot) this.roots.push( node );\r\n        const isLastBranch = this.maxBranchNum == node.pos.branchNum;\r\n\r\n        if (!isLastBranch && isTreeRoot) {\r\n            const offshoots = this.getOffshoots( node );\r\n            for (let i in offshoots) this.growBranch( node, i, offshoots[ i ].n, offshoots[ i ].attr );\r\n        }\r\n\r\n        for (let i=0; i<segmentCount; i++) {\r\n            node = this.addNode( node, false, offshootNum, segmentCount );\r\n            if (!isLastBranch) {\r\n                const offshoots = this.getOffshoots( node );\r\n                for (let i in offshoots) this.growBranch( node, i, offshoots[ i ].n, offshoots[ i ].attr );\r\n            }\r\n        }\r\n    }\r\n\r\n    addNode( prev, isOffshoot, offshootNum, maxNum, rootAttr ) {\r\n        const pos = this.getPos( prev ? prev.pos : null, isOffshoot, maxNum );\r\n        const node = {\r\n            pos,\r\n            attr: { ... (rootAttr||{}), ... (this.getNode( pos, prev, rootAttr )||{}) },\r\n            offshoots: [],\r\n\r\n            prev: null,\r\n            next: null,\r\n\r\n            branchRoot: null,\r\n            treeRoot: null,\r\n        };\r\n\r\n        if (prev) {\r\n            node.prev = prev;\r\n            node.branchRoot = isOffshoot ? node : prev.isOffshoot ? prev : prev.branchRoot;\r\n            node.treeRoot = prev.treeRoot ? prev.treeRoot : prev;\r\n\r\n            if (isOffshoot) {\r\n                prev.offshoots.push( node );\r\n                node.offshootNum = offshootNum;\r\n            }\r\n            else {\r\n                prev.next = node;\r\n            }\r\n\r\n        }\r\n        else {\r\n            node.branchRoot = node;\r\n            node.treeRoot = node;\r\n            node.offshootNum = offshootNum;\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    getPos( prev, isOffshoot, maxNum ) {\r\n        if (!prev) return {\r\n            num: 0,\r\n            branchNum: 0,\r\n\r\n            height: 0,\r\n            offshootHeight: 0,\r\n\r\n            isRoot: true,\r\n\r\n            isLast: maxNum == 0,\r\n            isLastBranch: this.maxBranchNum == 0,\r\n\r\n            isOffshoot,\r\n\r\n            numFactor: 1,\r\n            branchFactor: 1,\r\n        };\r\n\r\n        const pos = {\r\n            num: isOffshoot ? 0 : prev.num + 1,\r\n            branchNum: isOffshoot ? prev.branchNum + 1 : prev.branchNum,\r\n\r\n            height: isOffshoot ? prev.height : prev.height + 1,\r\n            offshootHeight: isOffshoot ? prev.num : prev.offshootHeight,\r\n\r\n            isRoot: false,\r\n\r\n            isLast: false,\r\n            isLastBranch: false,\r\n\r\n            isOffshoot,\r\n        };\r\n\r\n        if (pos.num == maxNum) pos.isLast = true;\r\n        if (pos.branchNum == this.maxBranchNum) pos.isLastBranch = true;\r\n\r\n        pos.numFactor = maxNum ? (1 - pos.num / maxNum) : 1;\r\n        pos.branchFactor = this.maxBranchNum ? (1 - pos.branchNum / this.maxBranchNum) : 1;\r\n\r\n        return pos;\r\n    }\r\n\r\n    eachSegment( cb ) {\r\n        for (let node of this.roots) this._each( node, cb );\r\n    }\r\n    _each( node, cb ) {\r\n        // note: the treeRoot node can have offshoots\r\n        // other nodes that are branchRoots cannot have offshoots\r\n        while ( node ) {\r\n            if (node.pos.num > 0) cb( node.prev, node );\r\n            for (let offshootNode of node.offshoots) this._each( offshootNode.next, cb );\r\n            node = node.next;\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    html,\r\n    math,\r\n    plantHelper,\r\n    rng,\r\n    BBox,\r\n    ProcTree,\r\n};","import { html } from \"../util/util\";\r\n\r\nconst plantPotSvg = pathAttr => {\r\n    const baseCfg = {\r\n        rimHeight: 20,\r\n        rimLipOuter: 2,\r\n        rimLipInner: 4,\r\n        bottom: 15,\r\n    };\r\n\r\n    const sw = pathAttr ? ('stroke-width' in pathAttr ? pathAttr[ 'stroke-width' ] : 2) : false;\r\n    if (sw) pathAttr[ 'stroke-width' ] = sw;\r\n\r\n    const pad = sw ? sw / 2 : 0;\r\n\r\n    const getPoints = cfg => {\r\n        return [\r\n            [ 'M', pad, pad ],\r\n            [ 'L', 100-pad, pad ],\r\n            [ 'L', 100-pad - cfg.rimLipOuter, cfg.rimHeight ],\r\n            [ 'L', 100-pad - cfg.rimLipInner, cfg.rimHeight ],\r\n            [ 'L', 100-pad - cfg.bottom, 100-pad ],\r\n            [ 'L', pad+cfg.bottom, 100-pad ],\r\n            [ 'L', pad+cfg.rimLipInner, cfg.rimHeight ],\r\n            [ 'L', pad+cfg.rimLipOuter, cfg.rimHeight ],\r\n            'Z',\r\n        ];\r\n    };\r\n\r\n    if (!pathAttr) pathAttr = {};\r\n    pathAttr.d = html.svg.compilePathDescription( getPoints( baseCfg ) );\r\n    const path = html.svg.node( 'path', pathAttr );\r\n\r\n    const svg = html.svg.root({\r\n        class: 'svg-plant-pot',\r\n        viewBox: '0 0 100 100',\r\n        preserveAspectRatio: 'xMidYMax meet',\r\n    });\r\n\r\n    svg.appendChild( path );\r\n\r\n    return svg;\r\n};\r\n\r\nexport { plantPotSvg };","// ripped from https://github.com/kfitfk/svg-boundings\r\n\r\nvar MIN_X = 'minX';\r\nvar MAX_X = 'maxX';\r\nvar MIN_Y = 'minY';\r\nvar MAX_Y = 'maxY';\r\n\r\n/**\r\n * expand the x-bounds, if the value lies outside the bounding box\r\n */\r\nfunction expandXBounds(bounds, value) {\r\n  if (bounds[MIN_X] > value) bounds[MIN_X] = value;\r\n  else if (bounds[MAX_X] < value) bounds[MAX_X] = value;\r\n}\r\n\r\n/**\r\n * expand the y-bounds, if the value lies outside the bounding box\r\n */\r\nfunction expandYBounds(bounds, value) {\r\n  if (bounds[MIN_Y] > value) bounds[MIN_Y] = value;\r\n  else if (bounds[MAX_Y] < value) bounds[MAX_Y] = value;\r\n}\r\n\r\n/**\r\n * Calculate the bezier value for one dimension at distance 't'\r\n */\r\nfunction calculateBezier(t, p0, p1, p2, p3) {\r\n  var mt = 1-t;\r\n  return (mt*mt*mt*p0) + (3*mt*mt*t*p1) + (3*mt*t*t*p2) + (t*t*t*p3);\r\n}\r\n\r\n/**\r\n * Calculate the bounding box for this bezier curve.\r\n * http://pomax.nihongoresources.com/pages/bezier/\r\n */\r\nfunction bezierCurveBoundingBox(x1, y1, cx1, cy1, cx2, cy2, x2, y2) {\r\n  var bounds = {};\r\n  bounds[MIN_X] = Math.min(x1, x2);\r\n  bounds[MIN_Y] = Math.min(y1, y2);\r\n  bounds[MAX_X] = Math.max(x1, x2);\r\n  bounds[MAX_Y] = Math.max(y1, y2);\r\n\r\n  var dcx0 = cx1 - x1;\r\n  var dcy0 = cy1 - y1;\r\n  var dcx1 = cx2 - cx1;\r\n  var dcy1 = cy2 - cy1;\r\n  var dcx2 = x2 - cx2;\r\n  var dcy2 = y2 - cy2;\r\n\r\n  if (cx1<bounds[MIN_X] || cx1>bounds[MAX_X] || cx2<bounds[MIN_X] || cx2>bounds[MAX_X]) {\r\n    // Just for better reading because we are doing middle school math here\r\n    var a = dcx0;\r\n    var b = dcx1;\r\n    var c = dcx2;\r\n\r\n    if (a+c !== 2*b) b += 0.0001;\r\n\r\n    var numerator = 2*(a - b);\r\n    var denominator = 2*(a - 2*b + c);\r\n    if (denominator === 0) denominator = 0.0001;\r\n    var quadroot = (2*b-2*a)*(2*b-2*a) - 2*a*denominator;\r\n    var root = Math.sqrt(quadroot);\r\n\r\n    var t1 =  (numerator + root) / denominator;\r\n    var t2 =  (numerator - root) / denominator;\r\n\r\n    if (0<t1 && t1<1) {\r\n      expandXBounds(bounds, calculateBezier(t1, x1, cx1, cx2, x2));\r\n    }\r\n    if (0<t2 && t2<1) {\r\n      expandXBounds(bounds, calculateBezier(t2, x1, cx1, cx2, x2));\r\n    }\r\n  }\r\n\r\n  if (cy1<bounds[MIN_Y] || cy1>bounds[MAX_Y] || cy2<bounds[MIN_Y] || cy2>bounds[MAX_Y]) {\r\n    a = dcy0;\r\n    b = dcy1;\r\n    c = dcy2;\r\n\r\n    if (a+c !== 2*b) b += 0.0001;\r\n\r\n    numerator = 2*(a - b);\r\n    denominator = 2*(a - 2*b + c);\r\n    if (denominator === 0) denominator = 0.0001;\r\n    quadroot = (2*b-2*a)*(2*b-2*a) - 2*a*denominator;\r\n    root = Math.sqrt(quadroot);\r\n\r\n    t1 =  (numerator + root) / denominator;\r\n    t2 =  (numerator - root) / denominator;\r\n\r\n    if (0<t1 && t1<1) {\r\n      expandYBounds(bounds, calculateBezier(t1, y1, cy1, cy2, y2));\r\n    }\r\n    if (0<t2 && t2<1) {\r\n      expandYBounds(bounds, calculateBezier(t2, y1, cy1, cy2, y2));\r\n    }\r\n  }\r\n\r\n  return {\r\n    x0: bounds[MIN_X],\r\n    x1: bounds[MAX_X],\r\n    y0: bounds[MIN_Y],\r\n    y1: bounds[MAX_Y],\r\n  };\r\n}\r\n\r\nexport { bezierCurveBoundingBox };","import { ProcTree, html, math, BBox } from \"../util/util\";\r\nimport { bezierCurveBoundingBox } from \"../util/bezierCurveBoundingBox\";\r\n\r\nconst precision = 10000;\r\nconst prc = v => {\r\n    if (v.length) return [\r\n        Math.round( v[0] * precision ),\r\n        Math.round( v[1] * precision ),\r\n    ];\r\n\r\n    return Math.round( v * precision );\r\n}\r\n\r\nclass BranchSegment {\r\n    constructor( base, style, n0, n1 ) {\r\n        this.base = base;\r\n\r\n        this.bottomWidth = n0.attr.width;\r\n        this.topWidth = n1.attr.width;\r\n\r\n        this.angle = n0.attr.segmentAngle !== undefined ? n0.attr.segmentAngle : n0.attr.angle;\r\n        this.bottomAngle = n0.attr.angle;\r\n        this.topAngle = n1.attr.angle;\r\n\r\n        this.length = n0.attr.length;\r\n\r\n        this.top = math.fromAngle( this.angle, this.length, this.base[0], this.base[1] );\r\n\r\n        this.ageOffset = n0.attr.totalLength;\r\n        this.branchNum = n0.pos.branchNum;\r\n\r\n        this.style = style;\r\n\r\n        this.bbox = this.getBoundingBox();\r\n    }\r\n\r\n    getPoints( age ) {\r\n        const ageFactor = this.getAgeFactor( age );\r\n        if (!ageFactor) return;\r\n\r\n        let top = this.top;\r\n        if (ageFactor < 1) {\r\n            top = math.fromAngle( this.angle, this.length * ageFactor, this.base[0], this.base[1] );\r\n        }\r\n\r\n        return math.rectFromLine(\r\n            this.base, top,\r\n            this.bottomAngle, this.topAngle,\r\n            this.bottomWidth, this.topWidth,\r\n            precision,\r\n        );\r\n    }\r\n\r\n    getBoundingBox() {\r\n        const points = math.rectFromLine(\r\n            this.base, this.top,\r\n            this.bottomAngle, this.topAngle,\r\n            this.bottomWidth, this.topWidth,\r\n            false\r\n        );\r\n\r\n        const bb = new BBox();\r\n        bb.addPoint( points[0][1], points[0][2] );\r\n        bb.addPoint( points[1][1], points[1][2] );\r\n        bb.addPoint( points[2][1], points[2][2] );\r\n        bb.addPoint( points[3][1], points[3][2] );\r\n\r\n        return bb;\r\n    }\r\n\r\n    getAgeFactor( age ) {\r\n        if (age <= this.ageOffset) return 0;\r\n        if (age >= this.ageOffset + this.length) return 1;\r\n        return (age - this.ageOffset) / this.length;\r\n    }\r\n\r\n    getOffsetPoint( x, y ) {\r\n        if (!x) {\r\n            if (!y) return this.base;\r\n            if (y==1) return this.top;\r\n            return math.fromAngle( this.angle, this.length * y, this.base[0], this.base[1] );\r\n        }\r\n\r\n        const dir = this.angle < 0 ? 1 : -1;\r\n\r\n        if (!y) {\r\n            return math.fromAngle( this.bottomAngle + 90*dir, this.bottomWidth/2 * x, this.base[0], this.base[1] );\r\n        }\r\n\r\n        if (y==1) {\r\n            return math.fromAngle( this.topAngle + 90*dir, this.topWidth/2 * x, this.top[0], this.top[1] );\r\n        }\r\n\r\n        const l1 = [\r\n            math.fromAngle( this.bottomAngle + 90*dir, this.bottomWidth/2, this.base[0], this.base[1] ),\r\n            math.fromAngle( this.topAngle + 90*dir, this.topWidth/2, this.top[0], this.top[1] )\r\n        ];\r\n        const l2 = [\r\n            math.fromAngle( this.bottomAngle + 90*dir, -this.bottomWidth/2, this.base[0], this.base[1] ),\r\n            math.fromAngle( this.topAngle + 90*dir, -this.topWidth/2, this.top[0], this.top[1] )\r\n        ];\r\n        const l3 = [\r\n            math.pointOnLine( l1[0], l1[1], y ),\r\n            math.pointOnLine( l2[0], l2[1], y ),\r\n        ];\r\n\r\n        x = 1 - (x/2 + .5);\r\n\r\n        return math.pointOnLine( l3[0], l3[1], x );\r\n    }\r\n}\r\n\r\nclass Leaf {\r\n    constructor( segment, { angle, length, handles, style, xOffset, yOffset } ) {\r\n        const base = segment.getOffsetPoint( xOffset, yOffset );\r\n        this.base = base;\r\n        this.pBase = prc( base );\r\n\r\n        this.angle = angle;\r\n        this.length = length;\r\n        this.handles = handles;\r\n\r\n        this.top = math.fromAngle( angle, length, base[0], base[1] );\r\n\r\n        this.ageOffset = segment.ageOffset + segment.length * yOffset;\r\n\r\n        this.style = style;\r\n\r\n        this.bbox = this.getBoundingBox();\r\n    }\r\n\r\n    getPoints( age ) {\r\n        const ageFactor = this.getAgeFactor( age );\r\n        if (!ageFactor) return;\r\n\r\n        let top = this.top;\r\n        if (ageFactor < 1) {\r\n            top = math.fromAngle( this.angle, this.length * ageFactor, this.base[0], this.base[1] );\r\n        }\r\n\r\n        const curves = this.getCurves( top, ageFactor, precision );\r\n\r\n        top = prc( top );\r\n\r\n        return [\r\n            'M', this.pBase,\r\n            'C', curves.up[0], curves.up[1], top,\r\n            'C', curves.down[0], curves.down[1], this.pBase\r\n        ];\r\n    }\r\n\r\n    getBoundingBox() {\r\n        const c = this.getCurves( this.top, 1, false );\r\n        const bb = new BBox(bezierCurveBoundingBox(\r\n            this.base[0], this.base[1],\r\n            c.up[0][0], c.up[0][1],\r\n            c.up[1][0], c.up[1][1],\r\n            this.top[0], this.top[1],\r\n        ));\r\n\r\n        bb.addBBox(bezierCurveBoundingBox(\r\n            this.top[0], this.top[1],\r\n            c.down[0][0], c.down[0][1],\r\n            c.down[1][0], c.down[1][1],\r\n            this.base[0], this.base[1],\r\n        ));\r\n\r\n        if (this.style['stroke-width']) bb.expand( this.style['stroke-width'] / 2 );\r\n\r\n        return bb;\r\n    }\r\n\r\n    getCurves( top, ageFactor, precision ) {\r\n        const bha = this.handles.bottomAngle;\r\n        const bhl = this.handles.bottomLength * ageFactor;\r\n        const tha = this.handles.topAngle;\r\n        const thl = this.handles.topLength * ageFactor;\r\n\r\n        return {\r\n            up: [\r\n                math.fromAngle( this.angle + bha, this.length * bhl, this.base[0], this.base[1], '', precision ),\r\n                math.fromAngle( this.angle + tha, this.length * thl, top[0], top[1], '', precision ),\r\n            ],\r\n            down: [\r\n                math.fromAngle( this.angle - tha, this.length * thl, top[0], top[1], '', precision ),\r\n                math.fromAngle( this.angle - bha, this.length * bhl, this.base[0], this.base[1], '', precision ),\r\n            ],\r\n        };\r\n    }\r\n\r\n    getAgeFactor( age ) {\r\n        if (age <= this.ageOffset) return 0;\r\n        if (age >= this.ageOffset + this.length) return 1;\r\n        return (age - this.ageOffset) / this.length;\r\n    }\r\n}\r\n\r\nclass Branches {\r\n    constructor() {\r\n        this.segments = [];\r\n        this.leaves = [];\r\n    }\r\n\r\n    addSegment( branchNum, segment ) {\r\n        let branch = this.segments[ branchNum ];\r\n        if (!branch) {\r\n            branch = [];\r\n            this.segments[ branchNum ] = branch;\r\n        }\r\n        branch.push( segment );\r\n    }\r\n    addLeaf( branchNum, leaf ) {\r\n        let branch = this.leaves[ branchNum ];\r\n        if (!branch) {\r\n            branch = [];\r\n            this.leaves[ branchNum ] = branch;\r\n        }\r\n        branch.push( leaf );\r\n    }\r\n\r\n    getArray() {\r\n        let ret = [];\r\n        for (let i=0; i<this.segments.length; i++) {\r\n            ret = ret.concat( this.segments[ i ] || [] );\r\n            ret = ret.concat( this.sortLeaves( this.leaves[ i ] ) );\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n    sortLeaves( a ) {\r\n        if (!a) return [];\r\n\r\n        return a.sort((l0,l1) => {\r\n            if (l1.bbox.containsPoint( l0.base[0], l0.base[1], true )) {\r\n                return -1;\r\n            }\r\n\r\n            if (l0.bbox.containsPoint( l1.base[0], l1.base[1], true )) {\r\n                return 1;\r\n            }\r\n\r\n            const d0 = math.distance( l0.base, [0,0] );\r\n            const d1 = math.distance( l1.base, [0,0] );\r\n            return d1 - d0;\r\n        });\r\n    }\r\n}\r\n\r\nclass PlantBody {\r\n    constructor( genus ) {\r\n        this.genus = genus;\r\n    }\r\n\r\n    init() {\r\n        this.genus.reset();\r\n\r\n        const tree = this.getTree();\r\n        tree.grow();\r\n\r\n        this.bbox = new BBox({\r\n            x0: -this.genus.width/2,\r\n            x1: this.genus.width/2,\r\n            y0: -this.genus.height,\r\n            y1: 0,\r\n        });\r\n\r\n        const branches = new Branches;\r\n        const points = new Map();\r\n        let maxAge = 0;\r\n\r\n        const getBasePoint = node => {\r\n            if (!node.prev) {\r\n                const p = [ node.attr.x || 0, 0 ];\r\n                this.bbox.addPoint( p[0], p[1] );\r\n                return p;\r\n            }\r\n            else if (node.pos.isOffshoot) {\r\n                const p = points.get( node.prev );\r\n                if (p) return p;\r\n\r\n                const rp = [ node.prev.attr.x || 0, 0 ];\r\n                points.set( node.prev, rp );\r\n                this.bbox.addPoint( rp[0], rp[1] );\r\n                return rp;\r\n            }\r\n\r\n            return points.get( node );\r\n        }\r\n\r\n        tree.eachSegment( (n0,n1) => {\r\n\r\n            const base = getBasePoint( n0 );\r\n            const style = this.genus.getSegmentStyle( n0, n1 );\r\n            const s = new BranchSegment( base, style, n0, n1 );\r\n\r\n            points.set( n1, s.top );\r\n            this.bbox.addBBox( s.bbox );\r\n            branches.addSegment( n0.pos.branchNum, s );\r\n\r\n            this.genus.getLeaves( n0, n1 ).map( (cfg, i) => {\r\n                const leaf = new Leaf( s, cfg );\r\n\r\n                this.bbox.addBBox( leaf.bbox );\r\n                branches.addLeaf( n0.pos.branchNum, leaf );\r\n\r\n                if (leaf.ageOffset + leaf.length > maxAge) maxAge = leaf.ageOffset + leaf.length;\r\n            });\r\n\r\n            if (n1.attr.totalLength > maxAge) maxAge = n1.attr.totalLength;\r\n\r\n        });\r\n\r\n        this.parts = branches.getArray();\r\n        this.maxAge = maxAge;\r\n\r\n        // make sure the plant is centered\r\n        const bboxX = Math.max( Math.abs( this.bbox.x0 ), Math.abs( this.bbox.x1 ) );\r\n        this.bbox.x0 = -bboxX;\r\n        this.bbox.x1 = bboxX;\r\n\r\n        this.yFactor = (this.bbox.height / -this.bbox.y0) || 1;\r\n    }\r\n\r\n    getTree() {\r\n        const getNodeAttr = ( pos, prev, attr ) => {\r\n            return {\r\n                width: this.genus.getNodeWidth( pos, prev, attr ),\r\n                angle: prev ? this.genus.getSegmentAngle( pos, prev, attr ) : 0,\r\n                length: pos.isLast ? (prev ? prev.attr.length : 0) : this.genus.getSegmentLength( pos, prev, attr ),\r\n                totalLength: prev ? ((pos.isOffshoot ? 0 : prev.attr.length) + prev.attr.totalLength) : 0,\r\n            };\r\n        };\r\n        const getOffshoots = node => {\r\n            if (!node) return this.genus.getRoots();\r\n            return this.genus.getOffshoots( node );\r\n        };\r\n\r\n        return new ProcTree( this.genus.maxBranchNum, getNodeAttr, getOffshoots );\r\n    }\r\n\r\n    render( age, colors=true, svg ) {\r\n        age *= this.maxAge;\r\n\r\n        for (const p of this.parts) {\r\n            const points = p.getPoints( age );\r\n            if (!points) continue;\r\n\r\n            let style = {}, add = {};\r\n\r\n            if (colors) {\r\n                style = p.style;\r\n                add = {};\r\n                if (style['stroke-width']) add['stroke-width'] = prc( style['stroke-width'] );\r\n            }\r\n\r\n            const set = Object.assign( {}, style, add, {\r\n                d: html.svg.compilePathDescription( points ),\r\n            });\r\n            svg.appendChild( html.svg.node( 'path', set ) );\r\n        }\r\n    }\r\n\r\n    getSvg( age, colors ) {\r\n        if (!this.segments) this.init();\r\n\r\n        const svg = html.svg.root({\r\n            class: 'svg-plant-body',\r\n            viewBox: this.bbox.withPrecision( precision ).viewBox,\r\n            preserveAspectRatio: 'xMidYMax meet',\r\n        });\r\n\r\n        this.render( age, colors, svg );\r\n\r\n        return svg;\r\n    }\r\n}\r\n\r\nexport { PlantBody };","import { plantPotSvg } from \"./plantPotSvg\";\r\nimport { PlantBody } from \"./PlantBody\";\r\nimport { html } from \"../util/util\";\r\n\r\nclass SvgPlant {\r\n\r\n    constructor( genus, cfg ) {\r\n        this._cfg = {\r\n            color: true,\r\n            age: 1,\r\n            potSize: .3,\r\n            potPathAttr: { fill: '#fc7', stroke: '#da5' },\r\n        };\r\n        if (typeof cfg == 'object') {\r\n            for (let key in this._cfg) {\r\n                if (key in cfg) this[ key ] = cfg[ key ];\r\n            }\r\n        }\r\n\r\n        this.body = new PlantBody( genus );\r\n    }\r\n\r\n    get seed() {\r\n        return this.body.genus.rngSeed;\r\n    }\r\n\r\n    get color() { return this._cfg.color; }\r\n    set color( v ) {\r\n        v = !!v;\r\n        if (v != this._cfg.color) {\r\n            this._cfg.color = v;\r\n            this.update();\r\n        }\r\n    }\r\n\r\n    get age() { return this._cfg.age; }\r\n    set age( v ) {\r\n        v = Math.max( 0, Math.min( v, 1 ));\r\n        if (v != this._cfg.age) {\r\n            this._cfg.age = v;\r\n            this.update( true, false );\r\n        }\r\n    }\r\n\r\n    get potSize() { return this._cfg.potSize; }\r\n    set potSize( v ) {\r\n        v = Math.max( 0, Math.min( v, 1 ));\r\n        if (v != this._cfg.potSize) {\r\n            this._cfg.potSize = v;\r\n            this.update( false, true );\r\n        }\r\n    }\r\n\r\n    get potPathAttr() { return this._cfg.potPathAttr; }\r\n    set potPathAttr( v ) {\r\n        if (v != this._cfg.potPathAttr) {\r\n            this._cfg.potPathAttr = v;\r\n            this.update( false, true );\r\n        }\r\n    }\r\n\r\n    update( body=true, pot=true ) {\r\n        if (body) this._bodySvgElement = null;\r\n        if (pot) this._potSvgElement = null;\r\n        this.updateSvgElement();\r\n    }\r\n\r\n    get svgElement() {\r\n        if (!this._svgElement) {\r\n            this._svgElement = this.getSvgElement();\r\n        }\r\n        return this._svgElement;\r\n    }\r\n    updateSvgElement() {\r\n        const svg = this._svgElement;\r\n        if (!svg) return;\r\n\r\n        svg.innerHTML = this.getSvgElement().innerHTML;\r\n    }\r\n    getSvgElement() {\r\n        const svg = html.svg.root({\r\n            class: 'svg-plant',\r\n            viewBox: '0 0 1 1',\r\n            preserveAspectRatio: 'xMidYMax meet',\r\n        });\r\n\r\n        const place = ( el, x, y, w, h ) => {\r\n            el.setAttribute( 'x', x );\r\n            el.setAttribute( 'y', y );\r\n            el.setAttribute( 'width', w );\r\n            el.setAttribute( 'height', h );\r\n        };\r\n\r\n        const pot = this.potSvgElement;\r\n        const body = this.bodySvgElement;\r\n\r\n        if (this._cfg.potSize >= 1) {\r\n            svg.appendChild( pot );\r\n            place( pot, 0, 0, 1, 1 );\r\n        }\r\n        else if (this._cfg.potSize <= 0) {\r\n            svg.appendChild( body );\r\n            place( body, 0, 0, 1, 1 );\r\n        }\r\n        else {\r\n            svg.appendChild( pot );\r\n            place( pot, 0, 1 - this._cfg.potSize, 1, this._cfg.potSize );\r\n            svg.appendChild( body );\r\n\r\n            // with high contrast there is a slight gap visible, between pot and plant.\r\n            // without color this is way more noticable, and the slight overlap is invisible.\r\n            const overlap = this._cfg.color ? 0 : .001;\r\n\r\n            let height;\r\n            const bodyHeight = 1 - this._cfg.potSize;\r\n\r\n            if (this.body.yFactor > 1) {\r\n                // this means the plant has points \"below the fold\"\r\n                // or: points that overlap the potsize area\r\n                // so the height of \"1 - this._cfg.potSize\" needs to be expanded accordingly\r\n\r\n                const wrapperAR = 1 / bodyHeight;\r\n                const aboveFoldBodyAR = this.body.bbox.width / -this.body.bbox.y0;\r\n                if (wrapperAR < aboveFoldBodyAR) {\r\n                    // the plantbody is scaled down, to fit the viewbox's width\r\n                    // the yFactor now needs to be applied only to the plants scaled down height\r\n                    // not the full available area of \"1 - this._cfg.potSize\"\r\n\r\n                    const scaledBodyHeight = -this.body.bbox.y0 / this.body.bbox.width;\r\n                    height = bodyHeight + (scaledBodyHeight * this.body.yFactor - scaledBodyHeight);\r\n                }\r\n                else {\r\n                    height = bodyHeight * this.body.yFactor;\r\n                }\r\n            }\r\n            else {\r\n                height = bodyHeight;\r\n            }\r\n\r\n            place( body, 0, 0, 1, height + overlap );\r\n\r\n        }\r\n\r\n        return svg;\r\n    }\r\n\r\n    get potSvgElement() {\r\n        if (this._cfg.potSize == 0) return null;\r\n\r\n        if (!this._potSvgElement) {\r\n            this._potSvgElement = this.getPotSvgElement();\r\n        }\r\n        return this._potSvgElement;\r\n    }\r\n    getPotSvgElement() {\r\n        if (!this._cfg.color) return plantPotSvg();\r\n        return plantPotSvg( this._cfg.potPathAttr );\r\n    }\r\n\r\n    get bodySvgElement() {\r\n        if (this._cfg.potSize == 1) return null;\r\n\r\n        if (!this._bodySvgElement) {\r\n            this._bodySvgElement = this.getBodySvgElement();\r\n        }\r\n        return this._bodySvgElement;\r\n    }\r\n    getBodySvgElement() {\r\n        return this.body.getSvg( this._cfg.age, this._cfg.color );\r\n    }\r\n\r\n    animate( fromAge=0, toAge=1, durationMs=3000 ) {\r\n        this.cancelAnimation();\r\n\r\n        this._animation = {\r\n            fromAge,\r\n            toAge,\r\n            ageSpan: toAge - fromAge,\r\n            currentAge: fromAge,\r\n\r\n            durationMs,\r\n\r\n            nextAnimationFrame: undefined,\r\n\r\n            paused: true,\r\n        };\r\n\r\n        this.resumeAnimation();\r\n    }\r\n    pauseAnimation() {\r\n        if (this._animation) {\r\n            cancelAnimationFrame( this._animation.nextAnimationFrame );\r\n            this._animation.paused = true;\r\n        }\r\n    }\r\n    cancelAnimation() {\r\n        this.pauseAnimation();\r\n        this._animation = null;\r\n    }\r\n    resumeAnimation() {\r\n        const a = this._animation;\r\n        if (!a || !a.paused) return;\r\n        a.paused = false;\r\n\r\n        this.age = a.currentAge;\r\n\r\n        const acl = t => t<0 ? 0 : t>1 ? 1 : Math.sin( (t - .5) * Math.PI ) * .5 + .5;\r\n        const aclInv = t => t<0 ? 0 : t>1 ? 1 : Math.asin( t * 2 - 1 ) / Math.PI + .5;\r\n\r\n        let t0;\r\n        const upd = ts => {\r\n            if (!t0) {\r\n                const f = (a.currentAge - a.fromAge) / a.ageSpan;\r\n                t0 = ts - aclInv( f ) * a.durationMs;\r\n                a.nextAnimationFrame = requestAnimationFrame( upd );\r\n            }\r\n            else {\r\n                const f = acl( Math.min( 1, (ts - t0) / a.durationMs ) );\r\n\r\n                if (f < 1) {\r\n                    this._cfg.age = a.fromAge + f * a.ageSpan;\r\n                    a.currentAge = this._cfg.age;\r\n\r\n                    this._bodySvgElement = null;\r\n                    this.updateSvgElement();\r\n\r\n                    a.nextAnimationFrame = requestAnimationFrame( upd );\r\n                }\r\n                else {\r\n                    this.age = a.toAge;\r\n                    this._animation = null;\r\n                }\r\n            }\r\n        };\r\n\r\n        a.nextAnimationFrame = requestAnimationFrame( upd );\r\n    }\r\n}\r\n\r\nexport { SvgPlant };","import { rng } from \"../util/util\";\r\n\r\nclass BaseGenus {\r\n\r\n    constructor( rngSeed ) {\r\n        this.rng = rng( rngSeed );\r\n\r\n        this.width = 4;\r\n        this.height = 4;\r\n        this.maxBranchNum = 1;\r\n\r\n        this.segmentStyle = {\r\n            fill: '#161',\r\n            stroke: '#041',\r\n            'stroke-width': .0075,\r\n        };\r\n\r\n        this.leafStyle = {\r\n            stroke: '#0d5',\r\n            fill: 'rgba(0,255,110,.9)',\r\n            'stroke-width': .02,\r\n        };\r\n        this.leafCurveHandles = {\r\n            bottomAngle: 60,\r\n            bottomLength: .6,\r\n            topAngle: 179,\r\n            topLength: .2,\r\n        };\r\n    }\r\n\r\n    static get genusName() {\r\n        const cn = this.name;\r\n        return cn.substring( 0, cn.length - 5 );\r\n    }\r\n    get genusName() {\r\n        const cn = this.constructor.name;\r\n        return cn.substring( 0, cn.length - 5 );\r\n    }\r\n    get rngSeed() {\r\n        return this.rng.seed;\r\n    }\r\n    reset() {\r\n        this.rng.reset();\r\n    }\r\n\r\n    getRoots() {\r\n        return [\r\n            {\r\n                n: 3,\r\n                attr: { x: 0, segmentAngle: 0 }\r\n            },\r\n        ];\r\n    }\r\n    getOffshoots( node ) {\r\n        if (node.pos.isLast || node.pos.num==0) return [];\r\n\r\n        return [\r\n            {\r\n                n: 1,\r\n                attr: { segmentAngle: node.attr.angle - 60 }\r\n            },\r\n            {\r\n                n: 1,\r\n                attr: { segmentAngle: node.attr.angle + 60 }\r\n            },\r\n        ];\r\n    }\r\n\r\n    getNodeWidth( _pos, _prev, _attr ) {\r\n        return .1;\r\n    }\r\n    getSegmentLength( _pos, _prev, _attr ) {\r\n        return 1;\r\n    }\r\n    getSegmentAngle( pos, prev, _attr ) {\r\n        if (pos.isOffshoot) return prev.attr.angle;\r\n        return prev.attr.segmentAngle !== undefined ? prev.attr.segmentAngle : prev.attr.angle;\r\n    }\r\n\r\n    getSegmentStyle( _node0, _node1 ) {\r\n        return this.segmentStyle;\r\n    }\r\n\r\n    getLeaves( _n0, n1 ) {\r\n        if (!n1.pos.isLast) return [];\r\n\r\n        return [\r\n            {\r\n                angle: n1.attr.angle,\r\n                length: 1,\r\n                handles: this.leafCurveHandles,\r\n                style: this.leafStyle,\r\n\r\n                xOffset: 0,\r\n                yOffset: .95,\r\n            }\r\n        ];\r\n    }\r\n};\r\n\r\nexport { BaseGenus };","import { BaseGenus } from \"./BaseGenus\";\r\nimport { plantHelper } from \"../util/util\";\r\n\r\nclass BushyPlantGenus extends BaseGenus {\r\n\r\n    constructor( rngSeed ) {\r\n        super( rngSeed );\r\n\r\n        this.width = 6.1;\r\n        this.height = 6.6;\r\n        this.maxBranchNum = 3;\r\n\r\n        this.segmentStyle = {\r\n            fill: '#400',\r\n            stroke: '#931',\r\n            'stroke-width': .0075,\r\n        };\r\n\r\n        this.leafStyle = {\r\n            stroke: '#0d5',\r\n            fill: 'rgba(0,255,110,.9)',\r\n            'stroke-width': .02,\r\n        };\r\n        this.leafCurveHandles = {\r\n            bottomAngle: 60,\r\n            bottomLength: .6,\r\n            topAngle: 179,\r\n            topLength: .2,\r\n        };\r\n    }\r\n\r\n    getRoots() {\r\n        return [\r\n            {\r\n                n: this.rng.intRange( 4, 6 ),\r\n                attr: plantHelper.rootPosAngle( this.rng, .5, 6 ),\r\n            },\r\n        ];\r\n    }\r\n    getOffshoots( node ) {\r\n        if (node.pos.isLast || node.pos.num==0) return [];\r\n\r\n        const p = .5 * (.5 + .5 * node.pos.numFactor) * (.5 + .5 * node.pos.branchFactor);\r\n        const a = [];\r\n\r\n        const getNodeCount = () => 4 - node.pos.branchNum - this.rng.test( .6, 1, 0 );\r\n\r\n        if (this.rng.test( p )) a.push({\r\n            n: getNodeCount(),\r\n            attr: {\r\n                segmentAngle: node.attr.angle + this.rng.range( 25, 60 ),\r\n            }\r\n        });\r\n\r\n        if (this.rng.test( p )) a.push({\r\n            n: getNodeCount(),\r\n            attr: {\r\n                segmentAngle: node.attr.angle + this.rng.range( -60, -25 ),\r\n            }\r\n        });\r\n\r\n        return a;\r\n    }\r\n\r\n    getNodeWidth( pos, prev, _attr ) {\r\n        if (pos.isOffshoot && prev) return prev.attr.width;\r\n        return .1 * (.1 + .9 * pos.branchFactor);\r\n    }\r\n    getSegmentLength( pos, prev, _attr ) {\r\n        if (!prev) return 1;\r\n        if (!pos.isOffshoot && pos.branchNum>0) return prev.attr.length * .75;\r\n        if (!pos.isOffshoot) return prev.attr.length;\r\n\r\n        const f = .2 + .8 * (prev.branchRoot.prev ? prev.branchRoot.prev.pos.numFactor : 1);\r\n        return prev.attr.length * f;\r\n    }\r\n    getSegmentAngle( pos, prev, _attr ) {\r\n        if (pos.branchNum>0) return plantHelper.nextAngle( this.rng, pos, prev, 16, true );\r\n        return plantHelper.nextAngle( this.rng, pos, prev, 8, true );\r\n    }\r\n\r\n    getSegmentStyle( _node0, _node1 ) {\r\n        return this.segmentStyle;\r\n    }\r\n\r\n    getLeaves( _n0, n1 ) {\r\n        if (n1.pos.branchNum==0 && n1.pos.num<2) return [];\r\n\r\n        const leaves = [];\r\n\r\n        const addLeaf = avf => {\r\n            leaves.push({\r\n                angle: n1.attr.angle + (avf ? (avf * this.rng.range( 20, 40 )) : this.rng.range( -10, 10 )),\r\n                length: this.rng.range( .5, .75 ),\r\n                handles: this.leafCurveHandles,\r\n                style: this.leafStyle,\r\n\r\n                xOffset: avf ? -avf * this.rng.range( 0, .5) : 0,\r\n                yOffset: avf ? this.rng.range( .3, .7 ) : .95,\r\n            });\r\n        };\r\n\r\n        if (n1.pos.isLast && this.rng.test( .5 )) addLeaf( 0 );\r\n\r\n        if (this.rng.test( .5 )) addLeaf( 1 );\r\n        if (this.rng.test( .5 )) addLeaf( -1 );\r\n\r\n        return leaves;\r\n    }\r\n};\r\n\r\nexport { BushyPlantGenus };","import { BaseGenus } from \"./BaseGenus\";\r\nimport { plantHelper } from \"../util/util\";\r\n\r\nclass DragonTreeGenus extends BaseGenus {\r\n\r\n    constructor( rngSeed ) {\r\n        super( rngSeed );\r\n\r\n        this.width = 10.3;\r\n        this.height = 8.6;\r\n        this.maxBranchNum = 1;\r\n\r\n        this.segmentStyle = {\r\n            fill: '#400',\r\n            stroke: '#931',\r\n            'stroke-width': .0075,\r\n        };\r\n\r\n        this.leafStyle = {\r\n            stroke: '#0d5',\r\n            fill: 'rgba(0,255,110,.9)',\r\n            'stroke-width': .02,\r\n        };\r\n        this.leafCurveHandles = {\r\n            bottomAngle: 30,\r\n            bottomLength: .2,\r\n            topAngle: 179,\r\n            topLength: .2,\r\n        };\r\n    }\r\n\r\n    getRoots() {\r\n        return [\r\n            {\r\n                n: this.rng.intRange( 2, 4 ),\r\n                attr: plantHelper.rootPosAngle( this.rng, .5, 6 ),\r\n            },\r\n        ];\r\n    }\r\n    getOffshoots( node ) {\r\n        if (!node.pos.isLast) return [];\r\n\r\n        const p = .75;\r\n        const steps = { from: -60, to: 60, step: 30 };\r\n        const offshoots = plantHelper.repeat( this.rng, steps, p, angle => {\r\n            return {\r\n                n: 2,\r\n                attr: {\r\n                    segmentAngle: node.attr.angle + angle + this.rng.range( -10, 10 ),\r\n                }\r\n            };\r\n        });\r\n\r\n        if (!offshoots.length) offshoots.push({\r\n            n: 2,\r\n            attr: {\r\n                segmentAngle: this.rng.range( -60, 60 ),\r\n            }\r\n        });\r\n\r\n        return offshoots;\r\n    }\r\n\r\n    getNodeWidth( pos, prev, _attr ) {\r\n        if (pos.isOffshoot && prev) return prev.attr.width;\r\n        if (pos.branchNum == 1) return this.rng.range( .2, .3 );\r\n        return this.rng.range( .4, .6 );\r\n    }\r\n    getSegmentLength( pos, _prev, _attr ) {\r\n        if (pos.branchNum == 1) return this.rng.range( .2, .8 );\r\n        return this.rng.range( .5, 1.5 );\r\n    }\r\n    getSegmentAngle( pos, prev, _attr ) {\r\n        return plantHelper.nextAngle( this.rng, pos, prev, 8, true );\r\n    }\r\n\r\n    getSegmentStyle( _node0, _node1 ) {\r\n        return this.segmentStyle;\r\n    }\r\n\r\n    getLeaves( _n0, n1 ) {\r\n        if (!n1.pos.isLast || n1.pos.branchNum != 1) return [];\r\n\r\n        return plantHelper.repeat( this.rng, { from: -75, to: 75, step: 10 }, .5, angle => {\r\n            const av = this.rng.range( -5, 5 );\r\n            const sv = this.rng.range( -.7, .7 );\r\n\r\n            return {\r\n                angle: n1.attr.angle + angle + av,\r\n                length: 3.5 + sv,\r\n                handles: this.leafCurveHandles,\r\n                style: this.leafStyle,\r\n\r\n                xOffset: this.rng.range( -.2, .2 ),\r\n                yOffset: this.rng.range( .8, .95 ),\r\n            };\r\n        });\r\n    }\r\n};\r\n\r\nexport { DragonTreeGenus };","import { BaseGenus } from \"./BaseGenus\";\r\nimport { plantHelper } from \"../util/util\";\r\n\r\nclass ZamiaGenus extends BaseGenus {\r\n\r\n    constructor( rngSeed ) {\r\n        super( rngSeed );\r\n\r\n        this.width = 3.6;\r\n        this.height = 3.5;\r\n        this.maxBranchNum = 0;\r\n\r\n        this.segmentStyle = {\r\n            stroke: '#041',\r\n            fill: '#161',\r\n            'stroke-width': .0075,\r\n        };\r\n\r\n        this.leafStyle = {\r\n            stroke: '#0d5',\r\n            fill: 'rgba(0,255,110,.9)',\r\n            'stroke-width': .01,\r\n        };\r\n        this.leafCurveHandles = {\r\n            bottomAngle: 24,\r\n            bottomLength: .6,\r\n            topAngle: 179,\r\n            topLength: .2,\r\n        };\r\n    }\r\n\r\n    getRoots() {\r\n        return plantHelper.repeat( this.rng, 1, 3, () => {\r\n            return {\r\n                n: this.rng.intRange( 5, 7 ),\r\n                attr: {\r\n                    ... plantHelper.rootPosAngle( this.rng, .25, 15 ),\r\n                    branchArchAngle: this.rng.ranges([ -30, -5 ], [ 5, 30 ]),\r\n                }\r\n            };\r\n        });\r\n    }\r\n    getOffshoots( _node ) {\r\n        return [];\r\n    }\r\n\r\n    getNodeWidth( _pos, prev, _attr ) {\r\n        if (!prev) return .1;\r\n        return prev.attr.width * .8;\r\n    }\r\n    getSegmentLength( _pos, prev, _attr ) {\r\n        if (!prev) return this.rng.range( .4, 1 );\r\n        return prev.attr.length * this.rng.range( .6, .9 );\r\n    }\r\n    getSegmentAngle( pos, prev, _attr ) {\r\n        return plantHelper.archingBranchAngle( this.rng, pos, prev, 5, .6 );\r\n    }\r\n\r\n    getSegmentStyle( _node0, _node1 ) {\r\n        return this.segmentStyle;\r\n    }\r\n\r\n    getLeaves( _n0, n1 ) {\r\n        const length = n1.treeRoot.attr.length * 1.2 * (.5 + .5 * Math.sin( Math.PI * n1.pos.numFactor ));\r\n        const angles = n1.pos.isLast ? [ -70, -30, 30, 70 ] : [ -70, 70 ];\r\n\r\n        return plantHelper.repeat( this.rng, angles, .89, angle => {\r\n            const av = this.rng.range( -6, 6 );\r\n            const lv = this.rng.range( -.1, .1 );\r\n            const lf = Math.abs( angle ) < 70 ? .9 : 1;\r\n\r\n            return {\r\n                angle: n1.attr.angle + angle + av,\r\n                length: length * lf + lv,\r\n                handles: this.leafCurveHandles,\r\n                style: this.leafStyle,\r\n\r\n                xOffset: 0,\r\n                yOffset: 1,\r\n            };\r\n        });\r\n    }\r\n};\r\n\r\nexport { ZamiaGenus };","import { BaseGenus } from \"./BaseGenus\";\r\nimport { plantHelper } from \"../util/util\";\r\n\r\nclass PileaGenus extends BaseGenus {\r\n\r\n    constructor( rngSeed ) {\r\n        super( rngSeed );\r\n\r\n        this.width = 4.6;\r\n        this.height = 4.1;\r\n        this.maxBranchNum = 1;\r\n\r\n        this.segmentStyle = {\r\n            stem: {\r\n                stroke: '#931',\r\n                fill: '#400',\r\n                'stroke-width': .0075,\r\n            },\r\n            offshoot: {\r\n                stroke: '#931',\r\n                fill: '#400',\r\n                'stroke-width': .0075,\r\n            },\r\n            branch: {\r\n                stroke: '#041',\r\n                fill: '#161',\r\n                'stroke-width': .0075,\r\n            },\r\n        };\r\n\r\n        this.leafStyle = {\r\n            stroke: '#0d5',\r\n            fill: 'rgba(0,255,110,.9)',\r\n            'stroke-width': .02,\r\n        };\r\n        this.leafCurveHandles = {\r\n            bottomAngle: 80,\r\n            bottomLength: 1,\r\n            topAngle: 100,\r\n            topLength: .2,\r\n        };\r\n    }\r\n\r\n    getRoots() {\r\n        return [{\r\n            n: this.rng.intRange( 0, 3 ),\r\n            attr: plantHelper.rootPosAngle( this.rng, .25, 8 ),\r\n        }];\r\n    }\r\n    getOffshoots( node ) {\r\n        if (node.pos.isLast) return plantHelper.repeat( this.rng, 1, 12, () => {\r\n            return {\r\n                n: this.rng.intRange( 3, 6 ),\r\n                attr: {\r\n                    segmentAngle: node.attr.angle + this.rng.range( -40, 40 ),\r\n                    branchArchAngle: this.rng.ranges([ -40, -5 ], [ 5, 40 ]),\r\n                }\r\n            };\r\n        });\r\n\r\n        if (node.pos.num) return plantHelper.repeat( this.rng, 0, 4, () => {\r\n            return {\r\n                n: this.rng.intRange( 2, 3 ),\r\n                attr: {\r\n                    segmentAngle: node.attr.angle + this.rng.ranges([ -80, -40 ], [ 40, 80 ]),\r\n                    branchArchAngle: this.rng.ranges([ -40, -5 ], [ 5, 40 ]),\r\n                }\r\n            };\r\n        });\r\n\r\n        return [];\r\n    }\r\n\r\n    getNodeWidth( pos, prev, _attr ) {\r\n        if (pos.branchNum == 0) return this.rng.range( .1, .3 );\r\n        if (pos.isOffshoot) return prev.attr.width;\r\n        return this.rng.range( .05, .1 );\r\n    }\r\n    getSegmentLength( pos, prev, _attr ) {\r\n        if (!prev) return this.rng.range( .6, 1.2 );\r\n        if (pos.branchNum == 0) return prev.attr.length * .9;\r\n        if (pos.isOffshoot) return this.rng.range( .1, .2 );\r\n        if (pos.num == 1) {\r\n            if (prev.branchRoot.pos.isLast) return this.rng.range( .6, 1.2 );\r\n            return this.rng.range( .3, .6 );\r\n        }\r\n        return prev.attr.length * .75;\r\n    }\r\n    getSegmentAngle( pos, prev, _attr ) {\r\n        if (pos.branchNum == 0) return this.rng.range( -8, 8 );\r\n        return plantHelper.archingBranchAngle( this.rng, pos, prev, 5, .1 );\r\n    }\r\n\r\n    getSegmentStyle( node0, _node1 ) {\r\n        if (node0.pos.branchNum == 0) return this.segmentStyle.stem;\r\n        if (node0.pos.isOffshoot) return this.segmentStyle.offshoot;\r\n        return this.segmentStyle.branch;\r\n    }\r\n\r\n    getLeaves( n0, n1 ) {\r\n        if (!n1.pos.isLast || n1.pos.branchNum != 1) return [];\r\n\r\n        const length = (n1.treeRoot.attr.length || 1) * this.rng.range( .4, 1.5 );\r\n        const angle = plantHelper.segmentAngle( n0 ) + this.rng.range( -8, 8 );\r\n\r\n        return [{\r\n            angle,\r\n            length,\r\n            handles: this.leafCurveHandles,\r\n            style: this.leafStyle,\r\n\r\n            xOffset: 0,\r\n            yOffset: .96,\r\n        }];\r\n    }\r\n};\r\n\r\nexport { PileaGenus };","import { SvgPlant } from \"../Plant/SvgPlant\";\r\n\r\nconst testPlantBodySize = (genus, n=1000) => {\r\n    const avg = { width: 0, height: 0 };\r\n    const widths = [];\r\n    const heights = [];\r\n\r\n    for (let i=0; i<n; i++) {\r\n        const p = (new SvgPlant( new genus )).body;\r\n        p.genus.width = 0;\r\n        p.genus.height = 0;\r\n        p.init();\r\n\r\n        avg.width += p.bbox.width;\r\n        avg.height += p.bbox.height;\r\n\r\n        widths.push( p.bbox.width );\r\n        heights.push( p.bbox.height );\r\n    }\r\n\r\n    widths.sort( (a,b) => a - b );\r\n    heights.sort( (a,b) => a - b );\r\n\r\n    return {\r\n        avg: {\r\n            width: avg.width / n,\r\n            height: avg.height / n,\r\n        },\r\n        q( q ) {\r\n            const i = Math.max( 0, Math.min( n-1, Math.round( q / 100 * (n-1) ) ) );\r\n            console.log( i );\r\n            return {\r\n                width: widths[ i ],\r\n                height: heights[ i ],\r\n            };\r\n        }\r\n    };\r\n};\r\n\r\nconst findSeed = (genus, test, timeoutMs=10*1000) => {\r\n    let cancel = false, n = 0, seed;\r\n    const t0 = Date.now();\r\n\r\n    const to = setTimeout(() => {\r\n        cancel = true;\r\n    }, timeoutMs );\r\n\r\n    while (true) {\r\n        const p = (new SvgPlant( new genus )).body;\r\n        p.genus.width = 0;\r\n        p.genus.height = 0;\r\n        p.init();\r\n        n++;\r\n\r\n        if (test( p )) {\r\n            clearTimeout( to );\r\n            seed = p.genus.rngSeed;\r\n            console.log( 'Seed found!', seed );\r\n            break;\r\n        }\r\n\r\n        if (cancel) {\r\n            const t = Math.round( (Date.now() - t0) / 1000 );\r\n            console.log( 'No seed was found' );\r\n            break;\r\n        }\r\n    }\r\n\r\n    const t = ((Date.now() - t0) / 1000 ).toFixed( 2 );\r\n    console.log( 'findSeed finished after ' + t + ' seconds and ' + n + ' tries.' );\r\n\r\n    return seed;\r\n};\r\n\r\nconst testPerformance = (genus, durationMs=10*1000) => {\r\n    const t0 = Date.now();\r\n    let n = 0;\r\n\r\n    while (true) {\r\n        const p = (new SvgPlant( new genus )).body;\r\n        p.genus.width = 0;\r\n        p.genus.height = 0;\r\n        p.init();\r\n        n++;\r\n\r\n        if (Date.now() - t0 > durationMs) break;\r\n    }\r\n\r\n    const ms = Date.now() - t0;\r\n    const s = ms / 1000;\r\n\r\n    console.group( genus.genusName + ' Performance Test' );\r\n    console.log( 'created ' + n + ' plants in ' + s.toFixed( 2 ) + ' seconds' );\r\n    console.log( (n/s).toFixed(2) + ' plants/sec' );\r\n    console.log( (ms/n).toFixed(2) + ' ms/plant' );\r\n    console.groupEnd();\r\n\r\n    return;\r\n}\r\n\r\nexport {\r\n    testPlantBodySize,\r\n    findSeed,\r\n    testPerformance,\r\n}","\r\nimport { SvgPlant } from './Plant/SvgPlant';\r\nimport { BaseGenus } from './Genera/BaseGenus';\r\nimport { BushyPlantGenus } from './Genera/BushyPlantGenus';\r\nimport { DragonTreeGenus } from './Genera/DragonTreeGenus';\r\nimport { ZamiaGenus } from './Genera/ZamiaGenus';\r\nimport { PileaGenus } from './Genera/PileaGenus';\r\nimport * as DevTools from './util/DevTools';\r\nimport { plantHelper } from './util/util';\r\n\r\nconst Genera = {\r\n    'BushyPlant': BushyPlantGenus,\r\n    'DragonTree': DragonTreeGenus,\r\n    'Zamia': ZamiaGenus,\r\n    'Pilea': PileaGenus,\r\n};\r\n\r\nexport {\r\n    SvgPlant,\r\n    Genera,\r\n    BaseGenus, BushyPlantGenus, DragonTreeGenus, ZamiaGenus, PileaGenus,\r\n\r\n    plantHelper,\r\n    DevTools,\r\n};"],"names":["serializer","replacer","cycleReplacer","stack","keys","key","value","slice","indexOf","join","length","thisPos","this","splice","push","Infinity","call","module","obj","spaces","JSON","stringify","Mash","n","data","toString","i","h","charCodeAt","uheprng","seed","j","o","c","p","s","Array","k","mash","Math","random","rawprng","t","range","floor","string","count","String","fromCharCode","hash","args","prototype","arguments","cleanString","inStr","replace","hashString","initState","addEntropy","Date","getTime","done","Number","MAX_VALUE","floatBetween","min","max","intBetween","create","html","node","tag","set","const","document","createElement","attr","nodeNS","ns","createElementNS","let","name","setAttribute","svg","root","setAttributeNS","el","stroke","color","w","cap","dash","opacity","nss","compilePathDescription","points","d","math","toRadians","degrees","PI","fromAngle","angle","tx","ty","svgCommand","precision","a","sin","cos","round","unshift","rectFromLine","p1","p2","a1","a2","w1","w2","pointOnLine","distance","dx","dy","sqrt","plantHelper","rootPosAngle","rng","xMax","maxAngle","x","segmentAngle","abs","baseNode","undefined","nextAngle","pos","prevNode","variance","alternate","isOffshoot","pa","dir","branchNum","treeRoot","num","archingBranchAngle","numAdjust","base","branchRoot","branchArchAngle","numFactor","repeat","cb","shuffle","test","isArray","from","to","step","intRange","BBox","x0","x1","y0","y1","addX","v","addY","addPoint","y","addBBox","bbox","expand","contains","strict","containedBy","containsPoint","clone","withPrecision","prototypeAccessors","width","height","aspectRatio","pointsArray","viewBox","ProcTree","maxBranchNum","getNode","getOffshoots","roots","grow","growBranch","rootNode","offshootNum","segmentCount","isTreeRoot","addNode","isLastBranch","offshoots","prev","maxNum","rootAttr","getPos","Object","next","offshootHeight","isRoot","isLast","branchFactor","eachSegment","_each","offshootNode","plantPotSvg","pathAttr","sw","cfg","pad","rimHeight","rimLipOuter","rimLipInner","bottom","path","class","preserveAspectRatio","appendChild","expandXBounds","bounds","expandYBounds","calculateBezier","p0","p3","mt","bezierCurveBoundingBox","cx1","cy1","cx2","cy2","x2","y2","dcx0","dcy0","dcx1","dcy1","dcx2","dcy2","b","numerator","denominator","quadroot","t1","t2","prc","BranchSegment","style","n0","n1","bottomWidth","topWidth","bottomAngle","topAngle","top","ageOffset","totalLength","getBoundingBox","getPoints","age","ageFactor","getAgeFactor","bb","getOffsetPoint","l1","l2","l3","Leaf","segment","xOffset","yOffset","pBase","handles","curves","getCurves","up","down","bha","bhl","bottomLength","tha","thl","topLength","Branches","segments","leaves","addSegment","branch","addLeaf","leaf","getArray","ret","concat","sortLeaves","sort","l0","d0","PlantBody","genus","init","reset","tree","getTree","branches","Map","maxAge","get","rp","getBasePoint","getSegmentStyle","getLeaves","map","parts","bboxX","yFactor","getNodeWidth","getSegmentAngle","getSegmentLength","getRoots","render","colors","add","assign","getSvg","SvgPlant","_cfg","potSize","potPathAttr","fill","body","rngSeed","update","pot","_bodySvgElement","_potSvgElement","updateSvgElement","svgElement","_svgElement","getSvgElement","innerHTML","place","potSvgElement","bodySvgElement","overlap","bodyHeight","scaledBodyHeight","getPotSvgElement","getBodySvgElement","animate","fromAge","toAge","durationMs","cancelAnimation","_animation","ageSpan","currentAge","nextAnimationFrame","paused","resumeAnimation","pauseAnimation","cancelAnimationFrame","t0","upd","ts","f","acl","requestAnimationFrame","asin","BaseGenus","fn","substring","RNG","pass","fail","v0","v1","ranges","ep","last","pop","r","tmp","segmentStyle","stroke-width","leafStyle","leafCurveHandles","staticAccessors","genusName","cn","constructor","_pos","_prev","_attr","_node0","_node1","_n0","BushyPlantGenus","super","getNodeCount","avf","DragonTreeGenus","av","sv","ZamiaGenus","_node","angles","lv","lf","PileaGenus","stem","offshoot","node0","avg","widths","heights","q","console","log","timeoutMs","cancel","now","setTimeout","clearTimeout","toFixed","ms","group","groupEnd","Genera","BushyPlant","DragonTree","Zamia","Pilea"],"mappings":"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"}